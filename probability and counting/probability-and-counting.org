#+TITLE:R Basic
* Vectors
** R style
#+BEGIN_SRC R :exports both :session 
v = c(3,1,4,1,5,9)
#+END_SRC

#+RESULTS:
| 3 |
| 1 |
| 4 |
| 1 |
| 5 |
| 9 |

#+BEGIN_SRC R :exports both :session 
  v[c(1,3,5)]
#+END_SRC

#+RESULTS:
| 3 |
| 4 |
| 5 |

#+BEGIN_SRC R :exports both :session 
  v[-(2:4)]
#+END_SRC 

#+RESULTS:
| 3 |
| 5 |
| 9 |

#+BEGIN_SRC R :exports both :session 
1/(1:100)^2
#+END_SRC

#+RESULTS:
|                    1 |
|                 0.25 |
|    0.111111111111111 |
|               0.0625 |
|                 0.04 |
|   0.0277777777777778 |
|   0.0204081632653061 |
|             0.015625 |
|   0.0123456790123457 |
|                 0.01 |
|  0.00826446280991736 |
|  0.00694444444444444 |
|  0.00591715976331361 |
|  0.00510204081632653 |
|  0.00444444444444444 |
|           0.00390625 |
|  0.00346020761245675 |
|  0.00308641975308642 |
|  0.00277008310249307 |
|               0.0025 |
|  0.00226757369614512 |
|  0.00206611570247934 |
|  0.00189035916824197 |
|  0.00173611111111111 |
|               0.0016 |
|   0.0014792899408284 |
|  0.00137174211248285 |
|  0.00127551020408163 |
|  0.00118906064209275 |
|  0.00111111111111111 |
|  0.00104058272632674 |
|         0.0009765625 |
| 0.000918273645546373 |
| 0.000865051903114187 |
| 0.000816326530612245 |
| 0.000771604938271605 |
| 0.000730460189919649 |
| 0.000692520775623269 |
| 0.000657462195923734 |
|             0.000625 |
| 0.000594883997620464 |
| 0.000566893424036281 |
| 0.000540832882639265 |
| 0.000516528925619835 |
| 0.000493827160493827 |
| 0.000472589792060492 |
| 0.000452693526482571 |
| 0.000434027777777778 |
|  0.00041649312786339 |
|                4e-04 |
| 0.000384467512495194 |
| 0.000369822485207101 |
| 0.000355998576005696 |
| 0.000342935528120713 |
| 0.000330578512396694 |
| 0.000318877551020408 |
| 0.000307787011388119 |
| 0.000297265160523187 |
| 0.000287273771904625 |
| 0.000277777777777778 |
| 0.000268744961031981 |
| 0.000260145681581686 |
| 0.000251952632905014 |
|       0.000244140625 |
| 0.000236686390532544 |
| 0.000229568411386593 |
| 0.000222766763198931 |
| 0.000216262975778547 |
| 0.000210039907582441 |
| 0.000204081632653061 |
| 0.000198373338623289 |
| 0.000192901234567901 |
| 0.000187652467629949 |
| 0.000182615047479912 |
| 0.000177777777777778 |
| 0.000173130193905817 |
| 0.000168662506324844 |
| 0.000164365548980934 |
| 0.000160230732254446 |
|           0.00015625 |
| 0.000152415790275873 |
| 0.000148720999405116 |
| 0.000145158949049209 |
|  0.00014172335600907 |
|  0.00013840830449827 |
| 0.000135208220659816 |
| 0.000132117849121416 |
| 0.000129132231404959 |
| 0.000126246686024492 |
| 0.000123456790123457 |
| 0.000120758362516604 |
| 0.000118147448015123 |
| 0.000115620302925194 |
| 0.000113173381620643 |
| 0.000110803324099723 |
| 0.000108506944444444 |
| 0.000106281220108407 |
| 0.000104123281965848 |
| 0.000102030405060708 |
|                1e-04 |


* Factorials and binominal coefficients

$n!$

#+BEGIN_SRC R :exports both :session
n = 10
factorial(n)
#+END_SRC

#+RESULTS:
: 3628800

#+BEGIN_SRC R :exports both :session 
choose(10, 2)
#+END_SRC

#+RESULTS:
: 45

** 如果数字特别大，如何处理
log(n!)

#+BEGIN_SRC R :exports both :session 
log(3628800)
#+END_SRC

#+RESULTS:
: 15.1044125730755

#+BEGIN_SRC R :exports both :session 
lfactorial(10)
#+END_SRC

#+RESULTS:
: 15.1044125730755

#+BEGIN_SRC R :exports both :session 
lchoose(10, 2)
#+END_SRC

#+RESULTS:
: 3.80666248977032

#+BEGIN_SRC R :exports both :session 

log(45)
#+END_SRC

#+RESULTS:
: 3.80666248977032

* Sampling and simulation

十个数字里选取五个分别是？ 不可以重复

#+BEGIN_SRC R :exports both :session 
  n = 10; k = 5
  sample(n,k) 
#+END_SRC

#+RESULTS:
| 3 |
| 1 |
| 6 |
| 8 |
| 5 |

十个数字里选取五个分别是 ？ 可以重复

#+BEGIN_SRC R :exports both :session 
n <- 10; k <- 5
sample(n, k, replace = TRUE) 
#+END_SRC

#+RESULTS:
| 8 |
| 5 |
| 7 |
| 9 |
| 2 |

#+BEGIN_SRC R :exports both :session 
  n = 100
  r = replicate(10^5, sum(sample(n)==(1:n)))
  sum(r>=1)/10^4
#+END_SRC 

#+RESULTS:
: 6.3405



** 生日问题
23人中，至少有一对生日是相同的概率

#+BEGIN_SRC R :exports both :session 
  k = 23
  1 - prod((365 - k + 1):365)/365^k

#+END_SRC

#+RESULTS:
: 0.507297234323985

#+BEGIN_SRC R :exports both :session 
prod((360:365))
#+END_SRC
#+RESULTS:
: 2268919806753600

#+BEGIN_SRC R :exports both :session 
b = sample(1:365, 23, replace=TRUE)
table(b)
#+END_SRC

#+RE_SULTS:
|  12 | 1 |
|   replicate(1e5, {
    1-any(sample(n)==sample(n))
  })30 | 1 |
|  39 | 1 |
|  58 | 2 |
|  94 | 1 |
|  95 | 1 |
|  99 | 1 |
| 135 | 1 |
| 181 | 1 |
| 184 | 1 |
| 198 | 1 |
| 206 | 1 |
| 217 | 1 |
| 219 | 1 |
| 244 | 1 |
| 262 | 1 |
| 263 | 1 |
| 264 | 1 |
| 270 | 1 |
| 339 | 1 |
| 357 | 1 |
| 358 | 1 |

#+BEGIN_SRC R :exports both :session 
  r = replicate(10^4, max(tabulate(sample(1:365,23,replace = TRUE))))
  sum(r > 2)/10^4
#+END_SRC

#+RESULTS:
: 0.013

** Python style
R sample function in python

#+BEGIN_SRC ipython :session :exports both 
  import matplotlib.pyplot as plt
  %matplotlib inline
  import pandas as pd
  import numpy as np
  import seaborn as sns

  a = np.random.choice(10, 5)
  #a
  b = np.random.choice(10, 5, replace=True)
  b
#+END_SRC

#+RESULTS:
: array([6, 9, 3, 3, 3])




#+BEGIN_SRC ipython :session :exports both  
n = 23  
k = np.arange(350,366)
k

#+END_SRC

#+RESULTS:
: array([350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362,
:        363, 364, 365])


 
#+BEGIN_SRC ipython :session :exports both  
np.prod(k)
#+END_SRC

#+RESULTS:
: 2268919806753600

#+BEGIN_SRC ipython :session :exports both  
  k = 23  
  a = [i for i in range(365-k+1, 366,1)]
  a
  def prod(list):
      p = 1
      for i in list:
          p = p * i   
      return p
  1 - prod(a)/365**k
   

#+END_SRC

#+RESULTS:
: 0.5072972343239854

#+BEGIN_SRC ipython :session :exports both  :results output
import sys
print(sys.path)
#+END_SRC

#+RESULTS:
: ['', '/Users/stone20091652/.pyenv/versions/anaconda3-4.2.0/lib/python35.zip', '/Users/stone20091652/.pyenv/versions/anaconda3-4.2.0/lib/python3.5', '/Users/stone20091652/.pyenv/versions/anaconda3-4.2.0/lib/python3.5/plat-darwin', '/Users/stone20091652/.pyenv/versions/anaconda3-4.2.0/lib/python3.5/lib-dynload', '/Users/stone20091652/.pyenv/versions/anaconda3-4.2.0/lib/python3.5/site-packages', '/Users/stone20091652/.pyenv/versions/anaconda3-4.2.0/lib/python3.5/site-packages/Sphinx-1.4.6-py3.5.egg', '/Users/stone20091652/.pyenv/versions/anaconda3-4.2.0/lib/python3.5/site-packages/aeosa', '/Users/stone20091652/.pyenv/versions/anaconda3-4.2.0/lib/python3.5/site-packages/setuptools-27.2.0-py3.5.egg', '/Users/stone20091652/.pyenv/versions/anaconda3-4.2.0/lib/python3.5/site-packages/IPython/extensions', '/Users/stone20091652/.ipython']

* Home work
** 第50题
#+BEGIN_SRC R :exports both :session
  Test = 123
  n <- 20
  out <- replicate(1e5, {
    1-any(sample(n)==sample(n))
  })
  mean(out)

#+END_SRC

#+RESULTS:
: 0.36894

#+BEGIN_SRC R :exports both :session 
library(ggplot2) 


library(ggthemes) 

library(extrafont)

charts.data = read.csv("copper-data-for-book.csv")


#+END_SRC

#+RESULTS:
| copper | 2006 |  4176 | 79 |  5255 |
| copper | 2007 |  8560 | 81 | 10505 |
| copper | 2008 |  6473 | 76 |  8519 |
| copper | 2009 | 10465 | 80 | 13027 |
| copper | 2010 | 14977 | 86 | 17325 |
| copper | 2011 | 15421 | 83 | 18629 |
| copper | 2012 | 14805 | 82 | 18079 |
| copper | 2013 | 15183 | 80 | 19088 |
| copper | 2014 | 14012 | 76 | 18437 |
| others | 2006 |  1079 | 21 |  5255 |
| others | 2007 |  1945 | 19 | 10505 |
| others | 2008 |  2046 | 24 |  8519 |
| others | 2009 |  2562 | 20 | 13027 |
| others | 2010 |  2348 | 14 | 17325 |
| others | 2011 |  3208 | 17 | 18629 |
| others | 2012 |  3274 | 18 | 18079 |
| others | 2013 |  3905 | 20 | 19088 |
| others | 2014 |  4425 | 24 | 18437 |
#+R: action:barplot rownames:t columns:1 width:500 col:darkblue
#+BEGIN_SRC R :session :exports both :results graphics :file ./fig_1.png :width 600 :height 300 :res 80

p1 = ggplot(aes(y = export, x = year, colour = product), data = charts.data) + geom_line()
  p1
#+END_SRC

#+RESULTS:
[[file:./fig_1.png]]

#+BEGIN_SRC R :exports both :results graphics :file ./fig_2.png :session :width 600 :height 300 :res 120
p1 = ggplot(aes(y = export, x = year, colour = product), data = charts.data) + geom_line(size = 1.5)
p1
#+END_SRC

#+RESULTS:
[[file:./fig_2.png]]


